package ca.uvic.chisel.bfv;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.equinox.app.IApplication;
import org.eclipse.equinox.app.IApplicationContext;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.statushandlers.StatusManager;

import ca.uvic.chisel.bfv.ApplicationWorkbenchAdvisor;

/**
 * This class controls all aspects of the application's execution
 * @author Laura Chan (some code auto-generated by Eclipse)
 */
public class BigFileApplication implements IApplication {

	/* (non-Javadoc)
	 * @see org.eclipse.equinox.app.IApplication#start(org.eclipse.equinox.app.IApplicationContext)
	 */
	@Override
	public Object start(IApplicationContext context) throws Exception {
		Display display = PlatformUI.createDisplay();
		try {
			ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE, null);
			int returnCode = PlatformUI.createAndRunWorkbench(display, new ApplicationWorkbenchAdvisor());
			ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE, null);
			if (returnCode == PlatformUI.RETURN_RESTART)
				return IApplication.EXIT_RESTART;
			else
				return IApplication.EXIT_OK;
		} finally {
			display.dispose();
		}

	}

	/* (non-Javadoc)
	 * @see org.eclipse.equinox.app.IApplication#stop()
	 */
	@Override
	public void stop() {
		if (!PlatformUI.isWorkbenchRunning())
			return;
		final IWorkbench workbench = PlatformUI.getWorkbench();
		final Display display = workbench.getDisplay();
		display.syncExec(new Runnable() {
			@Override
			public void run() {
				if (!display.isDisposed())
					workbench.close();
			}
		});
	}

	/**
	 * Utility method for showing an error dialog. Also records the error in the application's error log.
	 * @param dialogTitle title that the error dialog should use
	 * @param message message that the error dialog should use
	 * @param t Throwable (i.e.: an exception or error) relating to this error dialog
	 */
	public static void showErrorDialog(String dialogTitle, String message, Throwable t) {
		Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();

		// TODO: the error code "1" is just a dummy value right now. 
		// If in the future specific error codes are implemented, add a parameter for the error code
		Status status = new Status(IStatus.ERROR, BigFileActivator.PLUGIN_ID, 1, t.getLocalizedMessage(), t);
		ErrorDialog.openError(shell, dialogTitle, message, status);
		StatusManager.getManager().handle(status);
	}

	/**
	 * Utility method for showing an information dialog with an associated exception/error.
	 * Used for displaying messages for exceptions that are thrown when the user tries to use a 
	 * feature improperly (e.g. trying to create an invalid region, tag or comment)
	 * Does not record anything in the application's error log.
	 * @param dialogTitle title that the information dialog should use
	 * @param message message that the information dialog should use
	 * @param t Throwable (i.e.: an exception or error) relating to this information dialog
	 */
	public static void showInformationDialog(String dialogTitle, String message, Throwable t) {
		Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		Status status = new Status(IStatus.INFO, BigFileActivator.PLUGIN_ID, IStatus.OK, t.getLocalizedMessage(), t);
		ErrorDialog.openError(shell, dialogTitle, message, status);
	}

	/**
	 * Utility method for showing an information dialog with no associated exception/error. 
	 * Does not record anything in the application's error log.
	 * @param dialogTitle title that the information dialog should use
	 * @param message message that the information dialog should use
	 */
	public static void showInformationDialog(String dialogTitle, String message) {
		Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		MessageDialog.openInformation(shell, dialogTitle, message);
	}
}